.atypic-home *,.atypic-home :after,.atypic-home :before{border:0 solid #e5e7eb;box-sizing:border-box}.atypic-home :after,.atypic-home :before{--tw-content:""}.atypic-home html{-webkit-text-size-adjust:100%;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4}.atypic-home body{line-height:inherit;margin:0}.atypic-home hr{border-top-width:1px;color:inherit;height:0}.atypic-home abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}.atypic-home h1,.atypic-home h2,.atypic-home h3,.atypic-home h4,.atypic-home h5,.atypic-home h6{font-size:inherit;font-weight:inherit}.atypic-home a{color:inherit;text-decoration:none}.atypic-home b,.atypic-home strong{font-weight:bolder}.atypic-home code,.atypic-home kbd,.atypic-home pre,.atypic-home samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}.atypic-home small{font-size:80%}.atypic-home sub,.atypic-home sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.atypic-home sub{bottom:-.25em}.atypic-home sup{top:-.5em}.atypic-home table{border-collapse:collapse;border-color:inherit;text-indent:0}.atypic-home button,.atypic-home input,.atypic-home optgroup,.atypic-home select,.atypic-home textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}.atypic-home button,.atypic-home select{text-transform:none}.atypic-home [type=button],.atypic-home [type=reset],.atypic-home [type=submit],.atypic-home button{-webkit-appearance:button;background-color:transparent;background-image:none}.atypic-home :-moz-focusring{outline:auto}.atypic-home :-moz-ui-invalid{box-shadow:none}.atypic-home progress{vertical-align:baseline}.atypic-home ::-webkit-inner-spin-button,.atypic-home ::-webkit-outer-spin-button{height:auto}.atypic-home [type=search]{-webkit-appearance:textfield;outline-offset:-2px}.atypic-home ::-webkit-search-decoration{-webkit-appearance:none}.atypic-home ::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.atypic-home summary{display:list-item}.atypic-home blockquote,.atypic-home dd,.atypic-home dl,.atypic-home figure,.atypic-home h1,.atypic-home h2,.atypic-home h3,.atypic-home h4,.atypic-home h5,.atypic-home h6,.atypic-home hr,.atypic-home p,.atypic-home pre{margin:0}.atypic-home fieldset{margin:0;padding:0}.atypic-home legend{padding:0}.atypic-home menu,.atypic-home ol,.atypic-home ul{list-style:none;margin:0;padding:0}.atypic-home textarea{resize:vertical}.atypic-home input::-moz-placeholder,.atypic-home textarea::-moz-placeholder{color:#9ca3af;opacity:1}.atypic-home input::placeholder,.atypic-home textarea::placeholder{color:#9ca3af;opacity:1}.atypic-home [role=button],.atypic-home button{cursor:pointer}.atypic-home :disabled{cursor:default}.atypic-home audio,.atypic-home canvas,.atypic-home embed,.atypic-home iframe,.atypic-home img,.atypic-home object,.atypic-home svg,.atypic-home video{display:block;vertical-align:middle}.atypic-home img,.atypic-home video{height:auto;max-width:100%}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */