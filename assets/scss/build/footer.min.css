.atypic-footer *,.atypic-footer :after,.atypic-footer :before{border:0 solid #e5e7eb;box-sizing:border-box}.atypic-footer :after,.atypic-footer :before{--tw-content:""}.atypic-footer html{-webkit-text-size-adjust:100%;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4}.atypic-footer body{line-height:inherit;margin:0}.atypic-footer hr{border-top-width:1px;color:inherit;height:0}.atypic-footer abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}.atypic-footer h1,.atypic-footer h2,.atypic-footer h3,.atypic-footer h4,.atypic-footer h5,.atypic-footer h6{font-size:inherit;font-weight:inherit}.atypic-footer a{color:inherit;text-decoration:none}.atypic-footer b,.atypic-footer strong{font-weight:bolder}.atypic-footer code,.atypic-footer kbd,.atypic-footer pre,.atypic-footer samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}.atypic-footer small{font-size:80%}.atypic-footer sub,.atypic-footer sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.atypic-footer sub{bottom:-.25em}.atypic-footer sup{top:-.5em}.atypic-footer table{border-collapse:collapse;border-color:inherit;text-indent:0}.atypic-footer button,.atypic-footer input,.atypic-footer optgroup,.atypic-footer select,.atypic-footer textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}.atypic-footer button,.atypic-footer select{text-transform:none}.atypic-footer [type=button],.atypic-footer [type=reset],.atypic-footer [type=submit],.atypic-footer button{-webkit-appearance:button;background-color:transparent;background-image:none}.atypic-footer :-moz-focusring{outline:auto}.atypic-footer :-moz-ui-invalid{box-shadow:none}.atypic-footer progress{vertical-align:baseline}.atypic-footer ::-webkit-inner-spin-button,.atypic-footer ::-webkit-outer-spin-button{height:auto}.atypic-footer [type=search]{-webkit-appearance:textfield;outline-offset:-2px}.atypic-footer ::-webkit-search-decoration{-webkit-appearance:none}.atypic-footer ::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.atypic-footer summary{display:list-item}.atypic-footer blockquote,.atypic-footer dd,.atypic-footer dl,.atypic-footer figure,.atypic-footer h1,.atypic-footer h2,.atypic-footer h3,.atypic-footer h4,.atypic-footer h5,.atypic-footer h6,.atypic-footer hr,.atypic-footer p,.atypic-footer pre{margin:0}.atypic-footer fieldset{margin:0;padding:0}.atypic-footer legend{padding:0}.atypic-footer menu,.atypic-footer ol,.atypic-footer ul{list-style:none;margin:0;padding:0}.atypic-footer textarea{resize:vertical}.atypic-footer input::-moz-placeholder,.atypic-footer textarea::-moz-placeholder{color:#9ca3af;opacity:1}.atypic-footer input::placeholder,.atypic-footer textarea::placeholder{color:#9ca3af;opacity:1}.atypic-footer [role=button],.atypic-footer button{cursor:pointer}.atypic-footer :disabled{cursor:default}.atypic-footer audio,.atypic-footer canvas,.atypic-footer embed,.atypic-footer iframe,.atypic-footer img,.atypic-footer object,.atypic-footer svg,.atypic-footer video{display:block;vertical-align:middle}.atypic-footer img,.atypic-footer video{height:auto;max-width:100%}.atypic-footer .dashicons{font-size:40px;height:40px;text-align:center;width:40px}@media screen and (min-width:640px){.atypic-footer .dashicons{font-size:60px;height:60px;text-align:center;width:60px}}.atypic-footer .dashicons:before{font-size:40px;height:40px;text-align:center;width:40px}@media screen and (min-width:640px){.atypic-footer .dashicons:before{font-size:60px;height:60px;text-align:center;width:60px}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */